using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using Core.Logs;
using Core.Settings;

namespace Core.GitHub;

/// <summary>
/// Service for creating GitHub issues programmatically using GitHub REST API
/// </summary>
public class GitHubIssueService
{
    /// <summary>
    /// Creates a GitHub issue with specified title and body
    /// </summary>
    /// <param name="title">Issue title</param>
    /// <param name="body">Issue body content</param>
    /// <returns>GitHub issue number</returns>
    public async Task<int> Create(string title, string body)
    {
        const string owner = "warboundio";
        const string repo = "warbound";

        using HttpClient client = new();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", ApplicationSettings.Instance.GithubToken);
        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.github+json"));
        client.DefaultRequestHeaders.UserAgent.ParseAdd("WarboundETL");

        var issue = new
        {
            title,
            body
        };

        string json = JsonSerializer.Serialize(issue);
        using StringContent content = new(json, Encoding.UTF8, "application/json");

        string url = $"https://api.github.com/repos/{owner}/{repo}/issues";
        using HttpResponseMessage response = await client.PostAsync(url, content);

        response.EnsureSuccessStatusCode();
        
        string responseContent = await response.Content.ReadAsStringAsync();
        using JsonDocument document = JsonDocument.Parse(responseContent);
        JsonElement root = document.RootElement;
        
        int issueNumber = root.GetProperty("number").GetInt32();
        string issueUrl = root.GetProperty("html_url").GetString() ?? string.Empty;
        
        Logging.Info(nameof(GitHubIssueService), $"Successfully created GitHub issue #{issueNumber}: {issueUrl}");
        
        return issueNumber;
    }

    /// <summary>
    /// Creates a test GitHub issue with hardcoded values for testing purposes
    /// </summary>
    /// <returns>GitHub issue number</returns>
    public async Task<int> CreateTestIssue()
    {
        const string testTitle = "Test Issue from Agent";
        const string testBody = "This is a test issue body generated by the agent.";
        
        return await Create(testTitle, testBody);
    }
}
