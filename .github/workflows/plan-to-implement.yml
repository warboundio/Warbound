name: Create IMPLEMENT Issue from PLAN PR

on:
  pull_request:
    types: [closed]

jobs:
  create-implementation-issue:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.title, 'PLAN:')
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      pull-requests: read
      project: write
    steps:
      - name: Extract plan title
        id: extract
        run: |
          PLAN_TITLE="${{ github.event.pull_request.title }}"
          PLAN_TITLE=${PLAN_TITLE#PLAN: }
          echo "plan_title=$PLAN_TITLE" >> "$GITHUB_OUTPUT"

      - name: Create IMPLEMENT issue
        id: create_issue
        uses: actions/github-script@v7
        with:
          script: |
            const planTitle = "${{ steps.extract.outputs.plan_title }}";
            const planFileName = planTitle.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9\-]/g, '');
            const implTitle = `IMPLEMENT: ${planTitle}`;
            const planFileUrl = `https://github.com/${{ github.repository }}/blob/main/DUCA/Plans/${planFileName}.md`;
            const implBody = `This issue tracks the implementation of the plan:\n\n${planFileUrl}`;

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: implTitle,
              body: implBody,
              labels: ['copilot']
            });

            core.setOutput('issue_id', issue.data.node_id);
            core.setOutput('issue_number', issue.data.number);

      - name: Get Copilot Bot ID
        id: copilot_bot
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const actors = await github.graphql(
              `query($owner:String!,$repo:String!){
                repository(owner:$owner,name:$repo){
                  suggestedActors(capabilities:[CAN_BE_ASSIGNED], first: 5) {
                    nodes {
                      login
                      ... on Bot { id }
                    }
                  }
                }
              }`,
              { owner: repo.owner, repo: repo.repo }
            );
            const copilot = actors.repository.suggestedActors.nodes.find(n=>n.login === "copilot");
            core.setOutput("copilot_id", copilot?.id);

      - name: Assign issue to Copilot
        if: steps.copilot_bot.outputs.copilot_id
        uses: actions/github-script@v7
        with:
          script: |
            const issueNodeId = '${{ steps.create_issue.outputs.issue_id }}';
            const copilotId = '${{ steps.copilot_bot.outputs.copilot_id }}';
            await github.graphql(`
              mutation($issueId:ID!,$actorId:ID!){
                replaceActorsForAssignable(input:{
                  assignableId:$issueId,
                  actorIds:[$actorId]
                }){
                  assignable { __typename }
                }
              }
            `, { issueId: issueNodeId, actorId: copilotId });

      - name: Add issue to project + set status
        uses: actions/github-script@v7
        with:
          script: |
            const issueId = '${{ steps.create_issue.outputs.issue_id }}';
            const projectId = "PVT_kwHODRaglc4A-QJy";
            const statusFieldId = "PVTSSF_lAHODRaglc4A-QJyzgxtltU";
            const agentsInProgressOptionId = "47fc9ee4";

            const addItemRes = await github.graphql(`
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item { id }
                }
              }
            `, {
              projectId,
              contentId: issueId
            });

            const itemId = addItemRes.addProjectV2ItemById.item.id;

            await github.graphql(`
              mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item { id }
                }
              }
            `, {
              projectId,
              itemId,
              fieldId: statusFieldId,
              optionId: agentsInProgressOptionId
            });
