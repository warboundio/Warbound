@page "/admin/duca"
@using Core
@using Core.ETL
@using Core.GitHub
@using Core.Logs
@rendermode InteractiveServer

<PageTitle>DUCA Workflow Panel</PageTitle>

<h1>DUCA Workflow Panel</h1>

<div class="container">
    <div class="row">
        <div class="col-md-8">
            <form>
                <div class="mb-3">
                    <label for="projectSelect" class="form-label">Target Project</label>
                    <select id="projectSelect" name="projectSelect" class="form-select" @bind="SelectedProject">
                        <option value="">Select a project...</option>
                        <option value="Addon">Addon</option>
                        <option value="AdminPanel">AdminPanel</option>
                        <option value="Data">Data</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label for="workflowTitle" class="form-label">Workflow Title</label>
                    <input type="text" 
                           id="workflowTitle" 
                           name="workflowTitle" 
                           class="form-control" 
                           placeholder="Enter a descriptive title for the workflow"
                           maxlength="200"
                           @bind="WorkflowTitle" />
                </div>

                <div class="mb-3">
                    <label for="workflowBody" class="form-label">Workflow Description</label>
                    <textarea id="workflowBody" 
                              name="workflowBody" 
                              class="form-control" 
                              rows="8" 
                              placeholder="Describe the workflow requirements and implementation details..."
                              @bind="WorkflowBody"></textarea>
                    <div class="form-text">
                        Character count: @(WorkflowBody?.Length ?? 0)
                    </div>
                </div>

                <div class="mb-3">
                    <button type="button" class="btn btn-primary" @onclick="HandleSubmit" disabled="@(!IsFormValid || IsSubmitting)">
                        @if (IsSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <text> Creating...</text>
                        }
                        else
                        {
                            <text>Create Workflow</text>
                        }
                    </button>
                </div>

                @if (!string.IsNullOrEmpty(SuccessMessage))
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        @SuccessMessage
                        <button type="button" class="btn-close" @onclick="() => SuccessMessage = string.Empty"></button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        @ErrorMessage
                        <button type="button" class="btn-close" @onclick="() => ErrorMessage = string.Empty"></button>
                    </div>
                }
            </form>
        </div>
    </div>
</div>

@code {
    private string SelectedProject = "";
    private string WorkflowTitle = "";
    private string WorkflowBody = "";
    private bool IsPlanRequired = false;
    private string SuccessMessage = "";
    private string ErrorMessage = "";
    private bool IsSubmitting = false;

    private bool IsFormValid => 
        !string.IsNullOrWhiteSpace(SelectedProject) &&
        !string.IsNullOrWhiteSpace(WorkflowTitle) &&
        !string.IsNullOrWhiteSpace(WorkflowBody);

    private async Task HandleSubmit()
    {
        if (!IsFormValid || IsSubmitting)
        {
            return;
        }

        IsSubmitting = true;
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;

        try
        {
            string issueTitle = $"{SelectedProject} | {WorkflowTitle}";

            GitHubIssueWriter issueWriter = new(SelectedProject, WorkflowTitle, WorkflowBody, IsPlanRequired);
            int issueId = await GitHubIssueService.Create(issueTitle, issueWriter.ToString(), true, "agent-work");
            
            using CoreContext db = new();
            GitHubIssue gitHubIssue = new()
            {
                IssueId = issueId,
                Name = issueTitle,
                CreatedAt = DateTime.UtcNow,
                WaitingForYou = false
            };

            db.GitHubIssues.Add(gitHubIssue);
            await db.SaveChangesAsync();

            SelectedProject = "";
            WorkflowTitle = "";
            WorkflowBody = "";
            SuccessMessage = $"✅ Successfully created GitHub issue #{issueId}: <a href=\"https://github.com/warboundio/warbound/issues/{issueId}\" target=\"_blank\" class=\"alert-link\">View Issue</a>";
        }
        catch (Exception ex)
        {
            Logging.Error(nameof(HandleSubmit), $"Failed to create GitHub issue: {ex.Message}", ex);
            ErrorMessage = $"❌ Failed to create GitHub issue: {ex.Message}";
        }
        finally
        {
            IsSubmitting = false;
        }
    }
}